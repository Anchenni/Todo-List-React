[{"/Users/anchenni/Desktop/workspace/mygit/Todo-List-React/src/index.js":"1","/Users/anchenni/Desktop/workspace/mygit/Todo-List-React/src/App.js":"2","/Users/anchenni/Desktop/workspace/mygit/Todo-List-React/src/components/TodoList.js":"3","/Users/anchenni/Desktop/workspace/mygit/Todo-List-React/src/components/Card.js":"4","/Users/anchenni/Desktop/workspace/mygit/Todo-List-React/src/modals/CreateTask.js":"5","/Users/anchenni/Desktop/workspace/mygit/Todo-List-React/src/modals/EditTask.js":"6"},{"size":246,"mtime":1672399027833,"results":"7","hashOfConfig":"8"},{"size":305,"mtime":1672431504319,"results":"9","hashOfConfig":"8"},{"size":1732,"mtime":1672443833641,"results":"10","hashOfConfig":"8"},{"size":1848,"mtime":1672443411536,"results":"11","hashOfConfig":"8"},{"size":1457,"mtime":1672431551631,"results":"12","hashOfConfig":"8"},{"size":1842,"mtime":1672426453835,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"xv3bl5",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"17"},"/Users/anchenni/Desktop/workspace/mygit/Todo-List-React/src/index.js",[],[],[],"/Users/anchenni/Desktop/workspace/mygit/Todo-List-React/src/App.js",[],[],"/Users/anchenni/Desktop/workspace/mygit/Todo-List-React/src/components/TodoList.js",[],[],"/Users/anchenni/Desktop/workspace/mygit/Todo-List-React/src/components/Card.js",["34"],[],"/Users/anchenni/Desktop/workspace/mygit/Todo-List-React/src/modals/CreateTask.js",[],[],"/Users/anchenni/Desktop/workspace/mygit/Todo-List-React/src/modals/EditTask.js",["35"],[],"import React, { useState , useEffect} from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nconst EditTaskPopup = ({modal, toggle, updateTask, taskObj}) => {\n    const [taskName, setTaskName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const handleChange = (e) => {\n        \n        const {name, value} = e.target\n\n        if(name === \"taskName\"){\n            setTaskName(value)\n        }else{\n            setDescription(value)\n        }\n    }\n\n    useEffect(() => {\n        setTaskName(taskObj.Name)\n        setDescription(taskObj.Description)\n    },[])\n\n    const handleUpdate = (e) => {\n        e.preventDefault();\n        let tempObj = {}\n        tempObj['Name'] = taskName\n        tempObj['Description'] = description\n        updateTask(tempObj)\n    }\n\n    return (\n        <Modal isOpen={modal} toggle={toggle}>\n            <ModalHeader toggle={toggle}>Update Task</ModalHeader>\n            <ModalBody>\n            \n                    <div className = \"form-group\">\n                        <label>Task Name</label>\n                        <input type=\"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\n                    </div>\n                    <div className = \"form-group\">\n                        <label>Description</label>\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\n                    </div>\n                \n            </ModalBody>\n            <ModalFooter>\n            <Button color=\"primary\" onClick={handleUpdate}>Update</Button>{' '}\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n            </ModalFooter>\n      </Modal>\n    );\n};\n\nexport default EditTaskPopup;",{"ruleId":"36","severity":1,"message":"37","line":2,"column":15,"nodeType":"38","messageId":"39","endLine":2,"endColumn":23},{"ruleId":"40","severity":1,"message":"41","line":22,"column":7,"nodeType":"42","endLine":22,"endColumn":9,"suggestions":"43"},"no-unused-vars","'CardText' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'taskObj.Description' and 'taskObj.Name'. Either include them or remove the dependency array. If 'setTaskName' needs the current value of 'taskObj.Name', you can also switch to useReducer instead of useState and read 'taskObj.Name' in the reducer.","ArrayExpression",["44"],{"desc":"45","fix":"46"},"Update the dependencies array to be: [taskObj.Description, taskObj.Name]",{"range":"47","text":"48"},[626,628],"[taskObj.Description, taskObj.Name]"]